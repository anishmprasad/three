{"ast":null,"code":"//import THREE from \"three\";\nimport GLRaycaster, { GLRaycasterParams } from \"./glraycaster\";\nimport PostProcessing from \"./post-processing\";\nimport WebVrWrapper from \"./webvr\";\nimport Network from \"../miniviews/network\";\nimport RenderQuality from \"../render-quality\"; // Just so that someone doesn't get a bright idea to modify these directly.\n\n/**\n * @type {THREE.WebGLRenderer}\n */\n\nlet rendererMain = null;\n/**\n * @type {GLRaycaster}\n */\n\nlet webGLRaycaster = null;\n/**\n * @type {PostProcessing}\n */\n\nlet postProcessing = null;\n/**\n * @type {WebVrWrapper}\n */\n\nlet webVrWrapper = null;\nlet isInitialized = false;\nconst boundingRect = new THREE.Box2();\nconst viewPort = {\n  left: NaN,\n  top: NaN,\n  bottom: NaN,\n  right: NaN\n};\nlet vpWidth, vpHeight;\nlet supportedTextures;\nconst NAMESPACE_SVG = \"http://www.w3.org/2000/svg\"; //DevSkim: ignore DS137138\n\nconst overlay2d = document.createElement(\"div\");\nconst domElement = document.createElement(\"div\");\nconst canvasHolder = document.createElement(\"div\");\nconst overlaySVG = document.createElementNS(NAMESPACE_SVG, \"svg\");\ndomElement.appendChild(canvasHolder);\ndomElement.setAttribute(\"main-canvas\", \"\");\ndomElement.id = \"main-canvas\";\nlet fog = null;\n\nfunction onFocus() {\n  if (Q3.selected && Q3.selected.type === \"LiveLabel\" && Q3.selected.element.isActive && Q3.editMode) {\n    Q3.selected.element.input.focus();\n  }\n}\n\nfunction onLoseFocus() {}\n\ndomElement.addEventListener(\"mouseenter\", onFocus, false);\ndomElement.addEventListener(\"mouseleave\", onLoseFocus, false);\n/**\n * @type {THREE.Scene}\n */\n\nconst scene = new THREE.Scene();\nscene.name = \"RootScene\";\n/**\n * @type {THREE.Scene}\n */\n\nlet activeScene = null;\n/**\n * @type {THREE.Camera}\n */\n\nlet camera = null;\nlet enableOutline = true,\n    enableHighlight = true;\n/**\n * @type {THREE.WebGLRendererParameters}\n */\n\nlet initGlParams;\n/**\n * @type {GLRaycasterParams}\n */\n\nlet initRcParams;\nlet renderQuality;\nlet lastFaceCount = 0;\n\nclass RenderManager {\n  constructor() {}\n\n  tryRestoreContext() {\n    if (!isInitialized) throw new Error(\"Can't restore uninitialized content.\");\n    rendererMain.domElement.remove();\n    rendererMain.dispose();\n    rendererMain = new THREE.WebGLRenderer(initGlParams);\n    canvasHolder.appendChild(rendererMain.domElement);\n\n    function disposeObjectContext(scene) {\n      scene.traverse(object => {\n        if (object.geometry) object.geometry.dispose();\n        if (object.material) object.material.dispose();\n        if (object.dispose) object.dispose();\n        if (object.material) object.material.needsUpdate = true;\n      });\n    }\n\n    disposeObjectContext(scene);\n    postProcessing = new PostProcessing({\n      renderer: rendererMain,\n      scene,\n      camera,\n      renderQuality\n    });\n    webVrWrapper = new WebVrWrapper(rendererMain);\n    webGLRaycaster.dispose();\n    this.setSize(vpWidth, vpHeight);\n    this.compile(scene, camera);\n    camera.update = true;\n  }\n\n  get activeScene() {\n    return activeScene;\n  }\n\n  setActiveScene(inScene) {\n    if (activeScene) scene.remove(activeScene);\n    scene.add(inScene);\n    activeScene = inScene;\n    Q3.scene = activeScene;\n    activeScene.fog = fog;\n    Network.setActive(activeScene);\n  }\n\n  setFog(newFog) {\n    fog = newFog;\n    scene.fog = fog;\n\n    if (activeScene) {\n      activeScene.fog = fog;\n    }\n  }\n\n  getFog() {\n    return fog;\n  }\n  /**\n   *\n   * @param {THREE.WebGLRendererParameters} glParams WebGL render context parameters.\n   * @param {GLRaycasterParams} rcParams Raycaster parameters.\n   */\n\n\n  init(glParams = {}, rcParams = {}, inScene, inCamera, inRenderQuality) {\n    if (isInitialized) throw new Error(\"Already initiallized.\");\n    Network.registerWorld(inScene);\n    Network.setActive(inScene);\n    scene.add(inScene);\n    activeScene = inScene;\n    camera = inCamera;\n    renderQuality = inRenderQuality;\n    initGlParams = glParams;\n    initRcParams = rcParams; // const canvas = glParams.canvas || document.createElement(\"canvas\");\n    // const context =  glParams.context || BrowserCapabilities.isWebGl2 ? canvas.getContext(\"webgl2\") : (canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\"));\n    // glParams.canvas = canvas;\n    // glParams.context = context;\n\n    rendererMain = new THREE.WebGLRenderer(glParams);\n    webGLRaycaster = new GLRaycaster(rcParams);\n    postProcessing = new PostProcessing({\n      renderer: rendererMain,\n      scene,\n      camera,\n      renderQuality\n    });\n    webVrWrapper = new WebVrWrapper(rendererMain);\n    const gl = rendererMain.getContext();\n    supportedTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    canvasHolder.appendChild(rendererMain.domElement);\n    domElement.appendChild(overlay2d);\n    domElement.appendChild(overlaySVG);\n    overlay2d.setAttribute(\"class\", \"overlay2d\");\n    overlaySVG.setAttribute(\"class\", \"overlay2d\");\n    overlaySVG.style.pointerEvents = \"none\";\n    Object.defineProperty(domElement, \"width\", {\n      get: () => {\n        return vpWidth;\n      },\n      set: () => {\n        throw new Error(\"Unsupported operation 'width'.\");\n      }\n    });\n    Object.defineProperty(domElement, \"height\", {\n      get: () => {\n        return vpHeight;\n      },\n      set: () => {\n        throw new Error(\"Unsupported operation 'height'.\");\n      }\n    });\n    isInitialized = true; // Workaround for https://github.com/mrdoob/three.js/issues/9108\n    // in case of using logaritmic depth buffer the shadows from directinal light are not working\n    // this workeround disables log depth buffer only for shadow map rendering\n\n    const originalRenderFunf = rendererMain.shadowMap.render;\n\n    rendererMain.shadowMap.render = function () {\n      const tmp = rendererMain.capabilities.logarithmicDepthBuffer;\n      rendererMain.capabilities.logarithmicDepthBuffer = false;\n      originalRenderFunf.apply(rendererMain.shadowMap, arguments);\n      rendererMain.capabilities.logarithmicDepthBuffer = tmp;\n    };\n\n    return this;\n  }\n\n  getSupportedExtensions() {\n    return rendererMain.context.getSupportedExtensions();\n  }\n\n  setSize(w, h, updateStyle) {\n    const pixelRatio = Q3.browserCapabilities.renderQuality >= RenderQuality.NORMAL ? window.devicePixelRatio || 1 : 1;\n    rendererMain.setSize(w, h, updateStyle);\n    rendererMain.setPixelRatio(pixelRatio);\n    webGLRaycaster.resize(w, h);\n    postProcessing.composer.setSize(w * pixelRatio, h * pixelRatio);\n    const rect = overlay2d.getBoundingClientRect();\n    boundingRect.min.set(rect.left, rect.top);\n    boundingRect.max.set(rect.right, rect.bottom);\n    vpWidth = domElement.clientWidth;\n    vpHeight = domElement.clientHeight;\n    return this;\n  }\n\n  getSize() {\n    return rendererMain.getSize();\n  }\n\n  updatePostProcessing(lastRenderer, data, editMode) {\n    postProcessing.updatePostProcessing({\n      lastRenderer,\n      ppData: data,\n      editMode,\n      enableHighlight,\n      enableOutline\n    });\n    return this;\n  }\n\n  set enableHighlight(val) {\n    enableHighlight = val;\n  }\n\n  get enableHighlight() {\n    return enableHighlight;\n  }\n\n  set enableOutline(val) {\n    enableOutline = val;\n  }\n\n  get enableOutline() {\n    return enableOutline;\n  }\n\n  get domElement() {\n    return domElement;\n  }\n\n  set toneMapping(val) {\n    rendererMain.toneMapping = val;\n  }\n\n  get toneMapping() {\n    return rendererMain.toneMapping;\n  }\n\n  set toneMappingExposure(val) {\n    rendererMain.toneMappingExposure = val;\n  }\n\n  get toneMappingExposure() {\n    return rendererMain.toneMappingExposure;\n  }\n\n  set gammaInput(val) {\n    rendererMain.gammaInput = val;\n  }\n\n  get gammaInput() {\n    return rendererMain.gammaInput;\n  }\n\n  set gammaOutput(val) {\n    rendererMain.gammaOutput = val;\n  }\n\n  get gammaOutput() {\n    return rendererMain.gammaOutput;\n  }\n\n  get info() {\n    return rendererMain.info;\n  }\n\n  get shadowMap() {\n    return rendererMain.shadowMap;\n  }\n\n  get pixelRatio() {\n    return rendererMain.getPixelRatio();\n  }\n\n  set localClippingEnabled(val) {\n    rendererMain.localClippingEnabled = val;\n  }\n\n  get localClippingEnabled() {\n    return rendererMain.localClippingEnabled;\n  }\n\n  getViewPort() {\n    return Object.freeze({\n      left: viewPort.left,\n      top: viewPort.top,\n      right: viewPort.right,\n      bottom: viewPort.bottom\n    });\n  }\n\n  setViewport(left, top, width, height) {\n    Object.assign(viewPort, {\n      top: top,\n      left: left,\n      bottom: top + height,\n      right: left + width\n    });\n    rendererMain.setViewport(left, top, width, height);\n    webGLRaycaster.setViewport(left, top, width, height);\n  }\n\n  setScissor(x, y, w, h) {\n    rendererMain.setScissor(x, y, w, h);\n    webGLRaycaster.setScissor(x, y, w, h);\n  }\n\n  get overlay2d() {\n    return overlay2d;\n  }\n\n  get overlay2dBounds() {\n    return boundingRect;\n  }\n\n  get overlaySVG() {\n    return overlaySVG;\n  }\n\n  get webVrWrapper() {\n    return webVrWrapper;\n  }\n\n  get raycaster() {\n    return webGLRaycaster;\n  }\n\n  enqueRaycaster(force = false) {\n    webGLRaycaster.enqueFrame(rendererMain, camera, force);\n  }\n\n  compile(scene, camera) {\n    rendererMain.compile(scene, camera);\n  }\n\n  getExtension(ext) {\n    return rendererMain.context.getExtension(ext);\n  }\n\n  getParameter(param) {\n    return rendererMain.context.getParameter(param);\n  }\n\n  get mainRenderer() {\n    return rendererMain;\n  }\n\n  get isRaycasterReady() {\n    return webGLRaycaster.isReady;\n  }\n\n  update() {\n    webGLRaycaster.updateBuffers(rendererMain);\n  }\n\n  compose(delta) {\n    scene.traverse(object => {\n      if (object.isAtom) object.update();\n\n      if (object.material && object.material.isMeshNestedMaterial) {\n        object.material.updateLayers(object, webGLRaycaster);\n      }\n    });\n    rendererMain.info.autoReset = false;\n    const gatePass = postProcessing.passRenderGates.get();\n\n    if (gatePass) {\n      gatePass.setGates(Network.gates);\n    }\n\n    postProcessing.composer.render(delta);\n\n    function selectVisibleObjects() {\n      let triangles = 0;\n      if (Q3.data.slides[Q3.slide].layers.Renderer) [Network.world, {\n        scene: Q3.gateNetwork.parent\n      }].concat(Network.gates).forEach(world => {\n        world.scene && world.scene.traverseVisible(object => {\n          if (Q3.data.assets.objects[object.uuid] && object.geometry) {\n            const index = object.geometry.getIndex();\n            const vertices = !index && object.geometry.getAttribute(\"position\");\n            triangles = triangles + (index ? index.count : vertices.count) / 3;\n          }\n        });\n      });\n      return triangles;\n    }\n\n    lastFaceCount = selectVisibleObjects();\n    rendererMain.info.autoReset = true;\n  }\n\n  get isContextLost() {\n    return rendererMain.getContext().isContextLost();\n  }\n\n  setOutlineObjects(objects = []) {\n    const pass = postProcessing.passOutline.get();\n    if (!pass) return;\n\n    while (pass.selectedObjects.pop()) {}\n\n    objects = objects instanceof Array ? objects : [objects];\n    objects.forEach(object => pass.selectedObjects.push(object));\n  }\n\n  setHighlightObjects(objects = []) {\n    const pass = postProcessing.passHighlight.get();\n    if (!pass) return;\n\n    while (pass.selectedObjects.pop()) {}\n\n    objects = objects instanceof Array ? objects : [objects];\n    Object.keys(Q3.data.assets.objects).forEach(uuid => {\n      if (Q3.data.assets.objects[uuid].highlight === \"on\") {\n        objects.push(Q3.scene.getObjectByProperty(\"uuid\", uuid));\n      }\n    });\n    objects.forEach(object => pass.selectedObjects.push(object));\n  }\n\n  toDataURL() {\n    return rendererMain.domElement.toDataURL();\n  }\n\n  clearOverlay(overlay) {\n    overlay.clear(rendererMain);\n  }\n\n  renderOverlay(overlay, params) {\n    overlay.render(rendererMain, scene, camera, params);\n  }\n\n  get faces() {\n    return lastFaceCount;\n  }\n\n  get root() {\n    return scene;\n  }\n\n  get maxTextureUnits() {\n    return supportedTextures;\n  }\n\n  toScreenCoords(x, y, out = new THREE.Vector2()) {\n    const px = Math.round((vpWidth * x + vpWidth) / 2);\n    const py = Math.round((vpHeight - vpHeight * y) / 2);\n    return out.set(px, py);\n  }\n\n  toScreenSpaceCoords(x, y, out = new THREE.Vector2()) {\n    if (y === undefined) {\n      y = x.y;\n      x = x.x;\n    }\n\n    const vp = this.getViewPort(),\n          vpWidth = vp.right - vp.left,\n          vpHeight = vp.bottom - vp.top;\n    out.x = x / vpWidth * 2 - 1;\n    out.y = 1 - y / vpHeight * 2;\n    return out;\n  }\n\n}\n\nconst instance = new RenderManager();\nexport default instance;\nexport { instance as RenderManager }; // WEBPACK FOOTER //\n// ./src/Q3/rendering/render-manager.js","map":{"version":3,"sources":["/Users/ghost/Documents/three/src/source/rendering/render-manager.js"],"names":["GLRaycaster","GLRaycasterParams","PostProcessing","WebVrWrapper","Network","RenderQuality","rendererMain","webGLRaycaster","postProcessing","webVrWrapper","isInitialized","boundingRect","THREE","Box2","viewPort","left","NaN","top","bottom","right","vpWidth","vpHeight","supportedTextures","NAMESPACE_SVG","overlay2d","document","createElement","domElement","canvasHolder","overlaySVG","createElementNS","appendChild","setAttribute","id","fog","onFocus","Q3","selected","type","element","isActive","editMode","input","focus","onLoseFocus","addEventListener","scene","Scene","name","activeScene","camera","enableOutline","enableHighlight","initGlParams","initRcParams","renderQuality","lastFaceCount","RenderManager","constructor","tryRestoreContext","Error","remove","dispose","WebGLRenderer","disposeObjectContext","traverse","object","geometry","material","needsUpdate","renderer","setSize","compile","update","setActiveScene","inScene","add","setActive","setFog","newFog","getFog","init","glParams","rcParams","inCamera","inRenderQuality","registerWorld","gl","getContext","getParameter","MAX_TEXTURE_IMAGE_UNITS","style","pointerEvents","Object","defineProperty","get","set","originalRenderFunf","shadowMap","render","tmp","capabilities","logarithmicDepthBuffer","apply","arguments","getSupportedExtensions","context","w","h","updateStyle","pixelRatio","browserCapabilities","NORMAL","window","devicePixelRatio","setPixelRatio","resize","composer","rect","getBoundingClientRect","min","max","clientWidth","clientHeight","getSize","updatePostProcessing","lastRenderer","data","ppData","val","toneMapping","toneMappingExposure","gammaInput","gammaOutput","info","getPixelRatio","localClippingEnabled","getViewPort","freeze","setViewport","width","height","assign","setScissor","x","y","overlay2dBounds","raycaster","enqueRaycaster","force","enqueFrame","getExtension","ext","param","mainRenderer","isRaycasterReady","isReady","updateBuffers","compose","delta","isAtom","isMeshNestedMaterial","updateLayers","autoReset","gatePass","passRenderGates","setGates","gates","selectVisibleObjects","triangles","slides","slide","layers","Renderer","world","gateNetwork","parent","concat","forEach","traverseVisible","assets","objects","uuid","index","getIndex","vertices","getAttribute","count","isContextLost","setOutlineObjects","pass","passOutline","selectedObjects","pop","Array","push","setHighlightObjects","passHighlight","keys","highlight","getObjectByProperty","toDataURL","clearOverlay","overlay","clear","renderOverlay","params","faces","root","maxTextureUnits","toScreenCoords","out","Vector2","px","Math","round","py","toScreenSpaceCoords","undefined","vp","instance"],"mappings":"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","sourcesContent":["//import THREE from \"three\";\n\nimport GLRaycaster, { GLRaycasterParams } from \"./glraycaster\";\nimport PostProcessing from \"./post-processing\";\nimport WebVrWrapper from \"./webvr\";\nimport Network from \"../miniviews/network\";\nimport RenderQuality from \"../render-quality\";\n\n// Just so that someone doesn't get a bright idea to modify these directly.\n/**\n * @type {THREE.WebGLRenderer}\n */\nlet rendererMain = null;\n\n/**\n * @type {GLRaycaster}\n */\nlet webGLRaycaster = null;\n\n/**\n * @type {PostProcessing}\n */\nlet postProcessing = null;\n\n/**\n * @type {WebVrWrapper}\n */\nlet webVrWrapper = null;\n\nlet isInitialized = false;\n\nconst boundingRect = new THREE.Box2();\nconst viewPort = {\n  left: NaN,\n  top: NaN,\n  bottom: NaN,\n  right: NaN\n};\n\nlet vpWidth, vpHeight;\nlet supportedTextures;\n\nconst NAMESPACE_SVG = \"http://www.w3.org/2000/svg\"; //DevSkim: ignore DS137138\nconst overlay2d = document.createElement(\"div\");\nconst domElement = document.createElement(\"div\");\nconst canvasHolder = document.createElement(\"div\");\nconst overlaySVG = document.createElementNS(NAMESPACE_SVG, \"svg\");\ndomElement.appendChild(canvasHolder);\n\ndomElement.setAttribute(\"main-canvas\", \"\");\ndomElement.id = \"main-canvas\";\n\nlet fog = null;\n\nfunction onFocus() {\n  if (\n    Q3.selected &&\n    Q3.selected.type === \"LiveLabel\" &&\n    Q3.selected.element.isActive &&\n    Q3.editMode\n  ) {\n    Q3.selected.element.input.focus();\n  }\n}\n\nfunction onLoseFocus() {}\n\ndomElement.addEventListener(\"mouseenter\", onFocus, false);\ndomElement.addEventListener(\"mouseleave\", onLoseFocus, false);\n\n/**\n * @type {THREE.Scene}\n */\nconst scene = new THREE.Scene();\nscene.name = \"RootScene\";\n\n/**\n * @type {THREE.Scene}\n */\nlet activeScene = null;\n\n/**\n * @type {THREE.Camera}\n */\nlet camera = null;\n\nlet enableOutline = true,\n  enableHighlight = true;\n\n/**\n * @type {THREE.WebGLRendererParameters}\n */\nlet initGlParams;\n\n/**\n * @type {GLRaycasterParams}\n */\nlet initRcParams;\n\nlet renderQuality;\n\nlet lastFaceCount = 0;\n\nclass RenderManager {\n  constructor() {}\n\n  tryRestoreContext() {\n    if (!isInitialized) throw new Error(\"Can't restore uninitialized content.\");\n\n    rendererMain.domElement.remove();\n    rendererMain.dispose();\n\n    rendererMain = new THREE.WebGLRenderer(initGlParams);\n    canvasHolder.appendChild(rendererMain.domElement);\n\n    function disposeObjectContext(scene) {\n      scene.traverse(object => {\n        if (object.geometry) object.geometry.dispose();\n        if (object.material) object.material.dispose();\n        if (object.dispose) object.dispose();\n\n        if (object.material) object.material.needsUpdate = true;\n      });\n    }\n\n    disposeObjectContext(scene);\n\n    postProcessing = new PostProcessing({\n      renderer: rendererMain,\n      scene,\n      camera,\n      renderQuality\n    });\n    webVrWrapper = new WebVrWrapper(rendererMain);\n    webGLRaycaster.dispose();\n\n    this.setSize(vpWidth, vpHeight);\n\n    this.compile(scene, camera);\n\n    camera.update = true;\n  }\n\n  get activeScene() {\n    return activeScene;\n  }\n\n  setActiveScene(inScene) {\n    if (activeScene) scene.remove(activeScene);\n\n    scene.add(inScene);\n    activeScene = inScene;\n    Q3.scene = activeScene;\n    activeScene.fog = fog;\n\n    Network.setActive(activeScene);\n  }\n\n  setFog(newFog) {\n    fog = newFog;\n    scene.fog = fog;\n    if (activeScene) {\n      activeScene.fog = fog;\n    }\n  }\n\n  getFog() {\n    return fog;\n  }\n\n  /**\n   *\n   * @param {THREE.WebGLRendererParameters} glParams WebGL render context parameters.\n   * @param {GLRaycasterParams} rcParams Raycaster parameters.\n   */\n  init(glParams = {}, rcParams = {}, inScene, inCamera, inRenderQuality) {\n    if (isInitialized) throw new Error(\"Already initiallized.\");\n\n    Network.registerWorld(inScene);\n    Network.setActive(inScene);\n\n    scene.add(inScene);\n    activeScene = inScene;\n\n    camera = inCamera;\n    renderQuality = inRenderQuality;\n\n    initGlParams = glParams;\n    initRcParams = rcParams;\n\n    // const canvas = glParams.canvas || document.createElement(\"canvas\");\n    // const context =  glParams.context || BrowserCapabilities.isWebGl2 ? canvas.getContext(\"webgl2\") : (canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\"));\n\n    // glParams.canvas = canvas;\n    // glParams.context = context;\n\n    rendererMain = new THREE.WebGLRenderer(glParams);\n    webGLRaycaster = new GLRaycaster(rcParams);\n    postProcessing = new PostProcessing({\n      renderer: rendererMain,\n      scene,\n      camera,\n      renderQuality\n    });\n    webVrWrapper = new WebVrWrapper(rendererMain);\n\n    const gl = rendererMain.getContext();\n    supportedTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n\n    canvasHolder.appendChild(rendererMain.domElement);\n    domElement.appendChild(overlay2d);\n    domElement.appendChild(overlaySVG);\n\n    overlay2d.setAttribute(\"class\", \"overlay2d\");\n    overlaySVG.setAttribute(\"class\", \"overlay2d\");\n    overlaySVG.style.pointerEvents = \"none\";\n\n    Object.defineProperty(domElement, \"width\", {\n      get: () => {\n        return vpWidth;\n      },\n      set: () => {\n        throw new Error(\"Unsupported operation 'width'.\");\n      }\n    });\n\n    Object.defineProperty(domElement, \"height\", {\n      get: () => {\n        return vpHeight;\n      },\n      set: () => {\n        throw new Error(\"Unsupported operation 'height'.\");\n      }\n    });\n\n    isInitialized = true;\n\n    // Workaround for https://github.com/mrdoob/three.js/issues/9108\n    // in case of using logaritmic depth buffer the shadows from directinal light are not working\n    // this workeround disables log depth buffer only for shadow map rendering\n    const originalRenderFunf = rendererMain.shadowMap.render;\n    rendererMain.shadowMap.render = function() {\n      const tmp = rendererMain.capabilities.logarithmicDepthBuffer;\n      rendererMain.capabilities.logarithmicDepthBuffer = false;\n      originalRenderFunf.apply(rendererMain.shadowMap, arguments);\n      rendererMain.capabilities.logarithmicDepthBuffer = tmp;\n    };\n\n    return this;\n  }\n\n  getSupportedExtensions() {\n    return rendererMain.context.getSupportedExtensions();\n  }\n\n  setSize(w, h, updateStyle) {\n    const pixelRatio =\n      Q3.browserCapabilities.renderQuality >= RenderQuality.NORMAL\n        ? window.devicePixelRatio || 1\n        : 1;\n\n    rendererMain.setSize(w, h, updateStyle);\n    rendererMain.setPixelRatio(pixelRatio);\n    webGLRaycaster.resize(w, h);\n    postProcessing.composer.setSize(w * pixelRatio, h * pixelRatio);\n\n    const rect = overlay2d.getBoundingClientRect();\n    boundingRect.min.set(rect.left, rect.top);\n    boundingRect.max.set(rect.right, rect.bottom);\n\n    vpWidth = domElement.clientWidth;\n    vpHeight = domElement.clientHeight;\n\n    return this;\n  }\n\n  getSize() {\n    return rendererMain.getSize();\n  }\n\n  updatePostProcessing(lastRenderer, data, editMode) {\n    postProcessing.updatePostProcessing({\n      lastRenderer,\n      ppData: data,\n      editMode,\n      enableHighlight,\n      enableOutline\n    });\n\n    return this;\n  }\n\n  set enableHighlight(val) {\n    enableHighlight = val;\n  }\n  get enableHighlight() {\n    return enableHighlight;\n  }\n\n  set enableOutline(val) {\n    enableOutline = val;\n  }\n  get enableOutline() {\n    return enableOutline;\n  }\n\n  get domElement() {\n    return domElement;\n  }\n\n  set toneMapping(val) {\n    rendererMain.toneMapping = val;\n  }\n  get toneMapping() {\n    return rendererMain.toneMapping;\n  }\n\n  set toneMappingExposure(val) {\n    rendererMain.toneMappingExposure = val;\n  }\n  get toneMappingExposure() {\n    return rendererMain.toneMappingExposure;\n  }\n\n  set gammaInput(val) {\n    rendererMain.gammaInput = val;\n  }\n  get gammaInput() {\n    return rendererMain.gammaInput;\n  }\n\n  set gammaOutput(val) {\n    rendererMain.gammaOutput = val;\n  }\n  get gammaOutput() {\n    return rendererMain.gammaOutput;\n  }\n\n  get info() {\n    return rendererMain.info;\n  }\n\n  get shadowMap() {\n    return rendererMain.shadowMap;\n  }\n\n  get pixelRatio() {\n    return rendererMain.getPixelRatio();\n  }\n\n  set localClippingEnabled(val) {\n    rendererMain.localClippingEnabled = val;\n  }\n  get localClippingEnabled() {\n    return rendererMain.localClippingEnabled;\n  }\n\n  getViewPort() {\n    return Object.freeze({\n      left: viewPort.left,\n      top: viewPort.top,\n      right: viewPort.right,\n      bottom: viewPort.bottom\n    });\n  }\n\n  setViewport(left, top, width, height) {\n    Object.assign(viewPort, {\n      top: top,\n      left: left,\n      bottom: top + height,\n      right: left + width\n    });\n\n    rendererMain.setViewport(left, top, width, height);\n    webGLRaycaster.setViewport(left, top, width, height);\n  }\n\n  setScissor(x, y, w, h) {\n    rendererMain.setScissor(x, y, w, h);\n    webGLRaycaster.setScissor(x, y, w, h);\n  }\n\n  get overlay2d() {\n    return overlay2d;\n  }\n  get overlay2dBounds() {\n    return boundingRect;\n  }\n  get overlaySVG() {\n    return overlaySVG;\n  }\n  get webVrWrapper() {\n    return webVrWrapper;\n  }\n  get raycaster() {\n    return webGLRaycaster;\n  }\n\n  enqueRaycaster(force = false) {\n    webGLRaycaster.enqueFrame(rendererMain, camera, force);\n  }\n\n  compile(scene, camera) {\n    rendererMain.compile(scene, camera);\n  }\n\n  getExtension(ext) {\n    return rendererMain.context.getExtension(ext);\n  }\n  getParameter(param) {\n    return rendererMain.context.getParameter(param);\n  }\n\n  get mainRenderer() {\n    return rendererMain;\n  }\n\n  get isRaycasterReady() {\n    return webGLRaycaster.isReady;\n  }\n  update() {\n    webGLRaycaster.updateBuffers(rendererMain);\n  }\n  compose(delta) {\n    scene.traverse(object => {\n      if (object.isAtom) object.update();\n\n      if (object.material && object.material.isMeshNestedMaterial) {\n        object.material.updateLayers(object, webGLRaycaster);\n      }\n    });\n\n    rendererMain.info.autoReset = false;\n\n    const gatePass = postProcessing.passRenderGates.get();\n    if (gatePass) {\n      gatePass.setGates(Network.gates);\n    }\n\n    postProcessing.composer.render(delta);\n\n    function selectVisibleObjects() {\n      let triangles = 0;\n      if (Q3.data.slides[Q3.slide].layers.Renderer)\n        [Network.world, { scene: Q3.gateNetwork.parent }]\n          .concat(Network.gates)\n          .forEach(world => {\n            world.scene &&\n              world.scene.traverseVisible(object => {\n                if (Q3.data.assets.objects[object.uuid] && object.geometry) {\n                  const index = object.geometry.getIndex();\n                  const vertices =\n                    !index && object.geometry.getAttribute(\"position\");\n\n                  triangles =\n                    triangles + (index ? index.count : vertices.count) / 3;\n                }\n              });\n          });\n\n      return triangles;\n    }\n\n    lastFaceCount = selectVisibleObjects();\n\n    rendererMain.info.autoReset = true;\n  }\n\n  get isContextLost() {\n    return rendererMain.getContext().isContextLost();\n  }\n\n  setOutlineObjects(objects = []) {\n    const pass = postProcessing.passOutline.get();\n\n    if (!pass) return;\n\n    while (pass.selectedObjects.pop()) {}\n\n    objects = objects instanceof Array ? objects : [objects];\n\n    objects.forEach(object => pass.selectedObjects.push(object));\n  }\n\n  setHighlightObjects(objects = []) {\n    const pass = postProcessing.passHighlight.get();\n\n    if (!pass) return;\n\n    while (pass.selectedObjects.pop()) {}\n\n    objects = objects instanceof Array ? objects : [objects];\n    Object.keys(Q3.data.assets.objects).forEach(uuid => {\n      if (Q3.data.assets.objects[uuid].highlight === \"on\") {\n        objects.push(Q3.scene.getObjectByProperty(\"uuid\", uuid));\n      }\n    });\n    objects.forEach(object => pass.selectedObjects.push(object));\n  }\n\n  toDataURL() {\n    return rendererMain.domElement.toDataURL();\n  }\n\n  clearOverlay(overlay) {\n    overlay.clear(rendererMain);\n  }\n\n  renderOverlay(overlay, params) {\n    overlay.render(rendererMain, scene, camera, params);\n  }\n\n  get faces() {\n    return lastFaceCount;\n  }\n\n  get root() {\n    return scene;\n  }\n\n  get maxTextureUnits() {\n    return supportedTextures;\n  }\n\n  toScreenCoords(x, y, out = new THREE.Vector2()) {\n    const px = Math.round((vpWidth * x + vpWidth) / 2);\n    const py = Math.round((vpHeight - vpHeight * y) / 2);\n\n    return out.set(px, py);\n  }\n\n  toScreenSpaceCoords(x, y, out = new THREE.Vector2()) {\n    if (y === undefined) {\n      y = x.y;\n      x = x.x;\n    }\n\n    const vp = this.getViewPort(),\n      vpWidth = vp.right - vp.left,\n      vpHeight = vp.bottom - vp.top;\n\n    out.x = (x / vpWidth) * 2 - 1;\n    out.y = 1 - (y / vpHeight) * 2;\n\n    return out;\n  }\n}\n\nconst instance = new RenderManager();\n\nexport default instance;\nexport { instance as RenderManager };\n\n// WEBPACK FOOTER //\n// ./src/Q3/rendering/render-manager.js\n"]},"metadata":{},"sourceType":"module"}