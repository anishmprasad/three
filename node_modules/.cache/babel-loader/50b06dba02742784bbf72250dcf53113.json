{"ast":null,"code":"//import THREE from \"three\";\nimport loadGeometry from './deserialize-geometry';\nimport loadTexture, { isTextureInUse, enqueueTextures } from './deserialize-texture';\nimport loadLight, { loadEnvLight, finalizeLight, enqueEnvironmentLight } from './asset-lights';\nimport loadMaterial, { isMaterialInUse } from './deserialize-material';\nimport loadObject, { finalizeObject, bindSkeleton } from './deserialize-object';\nimport { RenderManager } from '../rendering/render-manager';\nimport { enqueLivelabels } from './deserialize-livelabels';\nimport { enqueAnimations, populateAnimationData } from './deserialize-animations';\nimport Layer from '../layers/Layer';\nimport { addAnimation } from '../slides/animation/addAnimation';\nconst loaders = Object.freeze({\n  texture: new THREE.TextureLoader(),\n  HDRCube: new THREE.HDRCubeTextureLoader(),\n  draco: new THREE.DRACOLoader(),\n  GLTF: new THREE.GLTFLoader(),\n  file: new THREE.FileLoader()\n});\n\nclass CAssetDeserializer {\n  constructor() {}\n\n  _loadGeometries({\n    data\n  }) {\n    return Promise.all(Object.keys(data).map(key => loadGeometry({\n      uuid: key,\n      data: data[key],\n      loaders\n    })));\n  }\n\n  _loadTextures({\n    data\n  }) {\n    const newTextures = {};\n    const promises = Promise.all(Object.keys(data.assets.textures).filter(key => isTextureInUse({\n      uuid: key,\n      data\n    })).map(key => {\n      newTextures[key] = data.assets.textures[key];\n      return loadTexture({\n        uuid: key,\n        data: data.assets.textures[key],\n        materials: data.assets.materials,\n        slides: data.slides\n      });\n    }));\n    data.assets.textures = newTextures;\n    return promises;\n  }\n\n  _loadLights({\n    data,\n    browserCapabilities\n  }) {\n    // const newLights = {};\n    return Promise.all(Object.keys(data).map(key => {\n      const light = loadLight({\n        uuid: key,\n        data: data[key],\n        browserCapabilities\n      }); // newLights[key] = data[key];\n\n      return light;\n    }));\n  }\n\n  _loadEnvLights() {\n    return new Promise(resolve => {\n      loadEnvLight().then(light => {\n        resolve({\n          uuid: light.uuid,\n          light\n        });\n      });\n    });\n  }\n\n  _loadMaterials({\n    data,\n    textures,\n    envMap\n  }) {\n    const newMaterials = {};\n    const promises = Promise.all(Object.keys(data.assets.materials).filter(key => isMaterialInUse({\n      uuid: key,\n      data\n    })).map(key => {\n      const material = loadMaterial({\n        uuid: key,\n        data: data.assets.materials[key],\n        textures,\n        envMap\n      });\n      newMaterials[key] = data.assets.materials[key];\n      return material;\n    }));\n    data.assets.materials = newMaterials;\n    return promises;\n  }\n\n  _loadObjects({\n    data,\n    geometries,\n    materials,\n    slides = []\n  }) {\n    return Promise.all(Object.keys(data).map(key => loadObject({\n      uuid: key,\n      data: data[key],\n      geometries,\n      materials,\n      visible: slides[0] ? slides[0].animation[key] ? slides[0].animation[key].visible !== false : true : true\n    }))).then(objects => {\n      objects.forEach(({\n        uuid,\n        object\n      }) => finalizeObject({\n        object,\n        slides,\n        objects,\n        uuid,\n        data,\n        materials\n      }));\n      return objects;\n    });\n  }\n\n  _addLights({\n    lights,\n    objects,\n    data,\n    slides\n  }) {\n    Object.keys(lights).forEach(uuid => {\n      finalizeLight({\n        uuid,\n        light: lights[uuid],\n        objects,\n        data,\n        slides\n      });\n    });\n  }\n\n  _bindSkeletons({\n    data,\n    objects\n  }) {\n    Object.keys(objects).forEach(uuid => {\n      bindSkeleton({\n        uuid,\n        data,\n        object: objects[uuid],\n        objects\n      });\n    });\n  }\n\n  _enqueAssets({\n    data,\n    queue,\n    isAsset\n  }) {\n    enqueueTextures({\n      data: data.assets,\n      queue: queue.textures,\n      queuePriority: queue.highPriority,\n      isAsset\n    });\n    enqueEnvironmentLight({\n      data,\n      queue: queue.envlight,\n      isAsset\n    });\n    enqueAnimations({\n      data: data.assets,\n      queue: queue.animations\n    });\n    enqueLivelabels({\n      data,\n      queue: queue.livelabels\n    });\n  }\n\n  _loadQueue({\n    queue,\n    assets,\n    data,\n    background,\n    mixer,\n    editMode,\n    scene,\n    livelabelManager,\n    highPriorityCallback\n  }) {\n    let hasCalledPriority = false;\n    return new Promise(resolve => {\n      queue.sort();\n      const all = [];\n      let waitingForLast = false;\n\n      (function loadNextItems(count) {\n        const items = queue.getItems(count);\n\n        if (!hasCalledPriority && queue.highPriority.isEmpty()) {\n          if (highPriorityCallback) highPriorityCallback();\n          hasCalledPriority = false;\n        }\n\n        if (items.length > 0) {\n          for (const item of items) {\n            all.push(item.load({\n              loaders,\n              assets,\n              data,\n              item: item.data,\n              background,\n              mixer,\n              editMode,\n              scene,\n              livelabelManager\n            }) // .then(data => console.log(\"replace i guess\"))\n            .catch(reason => console.error(reason)).finally(() => {\n              if (!waitingForLast) loadNextItems(1);\n            }));\n          }\n        } else if (!waitingForLast) {\n          waitingForLast = true;\n          console.log('No more items');\n          Promise.all(all).then(() => {\n            console.log('all is loaded');\n            resolve();\n          });\n        }\n      })(5);\n    });\n  }\n\n  importAsset({\n    data,\n    assets,\n    browserCapabilities,\n    activeData,\n    slide,\n    layers\n  }) {\n    const {\n      assetId,\n      assetData\n    } = data;\n    activeData.assets.references.push(assetId);\n    Object.keys(assetData.assets).forEach(key => {\n      const assetType = assetData.assets[key];\n      const isObject = key === 'objects';\n      Object.keys(assetType).forEach(key => {\n        assetType[key].isReference = true;\n        if (isObject) assetType[key].parent_world = window.Q3.gateNetwork.currentWorldUuid;\n      });\n    });\n    const assetQueue = new AssetQueue();\n    const nextSlide = slide + 1;\n    const slideData = JSON.parse(JSON.stringify(activeData.slides[slide]));\n    activeData.slides.splice(nextSlide, 0, slideData);\n    addAnimation();\n    const new2DAssets = Object.keys(window.Q3.data.layers.layers2D).reduce((accum, uuid) => {\n      if (uuid !== undefined) {\n        accum[uuid] = true;\n        layers.list[uuid] = new Layer(activeData.layers.layers2D[uuid]);\n        layers.list[uuid].uuid = uuid;\n      }\n\n      return accum;\n    }, {});\n    layers.update();\n    activeData.slides[slide].layers = Object.assign({}, activeData.slides[slide].layers, new2DAssets);\n    return new Promise(resolve => {\n      this._loadGeometries({\n        data: assetData.assets.geometries\n      }).then(_geometries => {\n        const geometries = reduceArray(_geometries, 'geometry');\n        merge(assets.geometries, geometries);\n        merge(activeData.assets.geometries, assetData.assets.geometries);\n        console.log('Geometry ready.');\n\n        this._loadTextures({\n          data: assetData\n        }).then(_textures => {\n          const textures = reduceArray(_textures, 'texture');\n          merge(assets.textures, textures);\n          merge(activeData.assets.textures, assetData.assets.textures);\n          console.log('Textures ready.');\n\n          this._loadLights({\n            data: assetData.assets.lights,\n            browserCapabilities\n          }).then(_lights => {\n            const lights = reduceArray(_lights, 'light');\n            merge(assets.lights, lights);\n            merge(activeData.assets.lights, assetData.assets.lights);\n            console.log('Lights ready.');\n            const envMap = assets.envLight;\n\n            this._loadMaterials({\n              data: assetData,\n              textures,\n              envMap: envMap.cubeMap\n            }).then(_materials => {\n              const materials = reduceArray(_materials, 'material');\n              merge(assets.materials, materials);\n              merge(activeData.assets.materials, assetData.assets.materials);\n              console.log('Materials ready.');\n\n              this._loadObjects({\n                data: assetData.assets.objects,\n                geometries,\n                materials,\n                slides: assetData.slides\n              }).then(_objects => {\n                const objects = reduceArray(_objects, 'object');\n                merge(assets.objects, objects);\n                merge(activeData.assets.objects, assetData.assets.objects);\n                populateAnimationData({\n                  data: activeData,\n                  additionalData: assetData\n                });\n                Object.keys(assetData.assets.objects).forEach(key => {\n                  activeData.slides[slide].animation[key].visible = true;\n                });\n                console.log('Objects ready.');\n\n                this._addLights({\n                  lights,\n                  objects,\n                  data: assetData,\n                  slides: activeData.slides\n                });\n\n                this._bindSkeletons({\n                  data: assetData,\n                  objects\n                });\n\n                this._enqueAssets({\n                  data: assetData,\n                  queue: assetQueue,\n                  isAsset: true\n                });\n\n                this._loadQueue({\n                  queue: assetQueue,\n                  assets,\n                  data: assetData,\n                  background: window.Q3.background,\n                  mixer: window.Q3.mixer,\n                  scene: window.Q3.scene,\n                  editMode: window.Q3.editMode,\n                  livelabelManager: window.Q3.labels.live\n                }).then(() => {\n                  resolve(1);\n                  window.Q3.fire('assetsLoaded');\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  }\n\n  _loadReferences({\n    data\n  }) {\n    // loaders.file.setRequestHeader({\n    //     Authorization: `Bearer ${localStorage.getItem(\"jwt\")}`\n    // });\n    const existingReferences = Object.keys(data.assets).reduce((accum, key) => {\n      const assetType = data.assets[key];\n      if (key === 'references') return accum;\n      accum[key] = Object.keys(assetType).reduce((accum, key) => {\n        if (assetType[key].isReference) {\n          accum[key] = assetType[key];\n          delete assetType[key];\n        }\n\n        return accum;\n      }, {});\n      return accum;\n    }, {}); // console.log(existingReferences);\n\n    return Promise.all(data.assets.references.map(ref => {\n      return new Promise((resolve, reject) => {\n        const url = `${window.location.origin}${window.COOBO ? '/api' : ''}/assetlib/${ref}`;\n\n        function success(asset) {\n          asset = JSON.parse(asset);\n          Object.keys(asset.data.assets).forEach(key => {\n            const assetType = asset.data.assets[key];\n            Object.keys(assetType).forEach(key => {\n              assetType[key].isReference = true;\n            });\n          });\n          data.liveLabels = Object.assign({}, asset.data.liveLabels, data.liveLabels);\n          Object.keys(asset.data.assets).forEach(key => {\n            const assetTypeLib = asset.data.assets[key];\n            const assetTypeRef = existingReferences[key] || {};\n            const assetType = data.assets[key] = data.assets[key] || {};\n            const isObject = key === 'objects';\n            const isMaterial = key === 'materials';\n            Object.keys(assetTypeLib).forEach(key => {\n              if (isMaterial) assetType[key] = Object.assign({}, assetTypeLib[key], assetTypeRef[key]);else assetType[key] = assetTypeLib[key];\n\n              if (assetTypeRef[key]) {\n                const refAsset = assetTypeRef[key];\n                const ref = assetType[key];\n                Object.keys(refAsset).forEach(key => {\n                  if (isObject && key === 'parent_world') {\n                    ref[key] = refAsset[key];\n                  } // if (key === \"position\") {\n                  //     console.log(\"update position\")\n                  // } else if (key === \"rotation\") {\n                  //     console.log(\"update rotation\");\n                  // } else if (key === \"scale\") {\n                  //     console.log(\"update scale\");\n                  // } else if (key === \"quaternion\") {\n                  //     console.log(\"update quaternion\");\n                  // } else {\n                  //     ref[key] = refAsset[key];\n                  // }\n\n                });\n              }\n\n              if (isObject) {\n                const object = assetTypeLib[key];\n                data.slides.forEach(slide => {\n                  if (!slide.animation[key]) {\n                    slide.animation[key] = {\n                      position: {\n                        x: object.position.x,\n                        y: object.position.y,\n                        z: object.position.z\n                      },\n                      rotation: {\n                        x: object.rotation.x,\n                        y: object.rotation.y,\n                        z: object.rotation.z\n                      },\n                      scale: {\n                        x: object.scale.x,\n                        y: object.scale.y,\n                        z: object.scale.z\n                      }\n                    };\n                  }\n                });\n              }\n            });\n          }); // data.assets = Object.keys(data.assets).map(key => {\n          //     const sourceAssetType = data.assets[assetType];\n          //     const referenceAssetType = asset.data.assets[assetType];\n          // });\n\n          resolve();\n        }\n\n        loaders.file.load(url, success, undefined, reject);\n      });\n    })).then(loaders.file.setRequestHeader(undefined));\n  }\n\n  load({\n    data,\n    browserCapabilities,\n    curSlide,\n    isEditMode,\n    backgroundContainer\n  }) {\n    console.log(data);\n    const assets = new AssetLibrary();\n    const assetQueue = new AssetQueue();\n    window.Q3.assets = assets;\n    data.assets.references = data.assets.references || [];\n    return new Promise(resolve => {\n      this._loadReferences({\n        data\n      }).then(() => {\n        this._loadGeometries({\n          data: data.assets.geometries\n        }).then(_geometries => {\n          const geometries = reduceArray(_geometries, 'geometry');\n          assets.geometries = geometries;\n          console.log('Geometry ready.');\n\n          this._loadTextures({\n            data\n          }).then(_textures => {\n            const textures = reduceArray(_textures, 'texture');\n            assets.textures = textures;\n            console.log('Textures ready.');\n\n            this._loadLights({\n              data: data.assets.lights,\n              browserCapabilities\n            }).then(_lights => {\n              const lights = reduceArray(_lights, 'light');\n              assets.lights = lights;\n              console.log('Lights ready.');\n\n              this._loadEnvLights().then(_envLight => {\n                const envMap = {\n                  cubeMap: _envLight.light\n                };\n                assets.envLight = envMap;\n                console.log('Environment light ready.');\n\n                this._loadMaterials({\n                  data,\n                  textures,\n                  envMap: envMap.cubeMap\n                }).then(_materials => {\n                  const materials = reduceArray(_materials, 'material');\n                  assets.materials = materials;\n                  console.log('Materials ready.');\n\n                  this._loadObjects({\n                    data: data.assets.objects,\n                    geometries,\n                    materials,\n                    slides: data.slides\n                  }).then(_objects => {\n                    const objects = reduceArray(_objects, 'object');\n                    assets.objects = objects;\n                    console.log('Objects ready.');\n\n                    this._addLights({\n                      lights,\n                      objects,\n                      data,\n                      slides: data.slides\n                    });\n\n                    this._bindSkeletons({\n                      data,\n                      objects\n                    });\n\n                    resolve(1);\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n    }).then(result => {\n      RenderManager.shadowMap.needsUpdate = true;\n      const slide = data.slides[curSlide];\n\n      if (!isEditMode) {\n        backgroundContainer.parentElement.style.backgroundColor = slide.backgroundValue;\n      }\n\n      window.Q3.fire('assetsLoaded');\n      window.Q3.fire('labelsLoaded');\n      window.Q3.allIsLoaded = true;\n      window.Q3.camera.updateCamera();\n\n      if (!window.Q3.editMode) {\n        window.Q3.splash.removeProgress();\n      }\n\n      if (window.Q3.data.setups.autoStart !== false || window.Q3.editMode) {\n        window.Q3.splash.remove();\n        window.Q3.fire('splashremoved');\n      } else {\n        $('#start-tour-btn').fadeIn().on('click', () => {\n          window.Q3.splash.remove();\n          window.Q3.fire('splashremoved');\n        });\n      }\n\n      console.log('Everything is ready.');\n\n      this._enqueAssets({\n        data,\n        queue: assetQueue\n      });\n\n      const highPriorityCallback = () => {\n        window.Q3.background.setBackground(slide.backgroundType, slide.backgroundValue, slide.backgroundOffsetX, slide.backgroundOffsetY, slide.backgroundScaleX, slide.backgroundScaleY, 0);\n      };\n\n      this._loadQueue({\n        queue: assetQueue,\n        assets,\n        data,\n        background: window.Q3.background,\n        mixer: window.Q3.mixer,\n        scene: window.Q3.scene,\n        editMode: window.Q3.editMode,\n        livelabelManager: window.Q3.labels.live,\n        highPriorityCallback\n      }).then(() => {\n        window.Q3.fire('assetsLoaded');\n      }); // console.log(assetQueue);\n\n\n      return result;\n    });\n  }\n\n}\n\nconst AssetDeserializer = new CAssetDeserializer();\nexport default AssetDeserializer;\nexport { AssetDeserializer };\n\nclass AssetLibrary {\n  constructor() {\n    this.textures = {};\n    this.geometries = {};\n    this.lights = {};\n    this.materials = {};\n    this.objects = {};\n    this.animations = {};\n    this.envLight = {\n      cubeMap: null\n    };\n    this.references = [];\n  }\n\n}\n\nclass AssetQueue {\n  constructor() {\n    this.textures = new Queue();\n    this.highPriority = new Queue(true);\n    this.livelabels = new Queue();\n    this.envlight = new Queue();\n    this.animations = new Queue();\n    Object.freeze(this);\n  }\n\n  sort() {\n    Object.keys(this).forEach(q => {\n      if (this[q] instanceof Queue) this[q].sort();\n    });\n  }\n\n  getItems(count) {\n    const result = [];\n\n    for (let i = 0; i < count; i++) {\n      let item = this.getItem();\n\n      if (!!item) {\n        result.push(item);\n      } else {\n        return result;\n      }\n    }\n\n    return result;\n  }\n\n  getItem() {\n    const queue = Object.keys(this).map(key => this[key]).reduce((prev, curr) => {\n      if (!(curr instanceof Queue) || curr.queue.length === 0) {\n        return prev;\n      }\n\n      if (!prev.queue || prev.queue.length === 0) {\n        return curr;\n      }\n\n      return prev.queue[0].priority < curr.queue[0].priority ? prev : curr;\n    }, {\n      queue: [] //priority: Infinity\n\n    });\n    return queue && queue.queue.shift() || null;\n  }\n\n}\n\nclass Queue {\n  constructor(isHighPriority = false) {\n    /**\n     * @type {QueueItem[]}\n     */\n    this.queue = [];\n    this.isHighPriority = isHighPriority;\n    Object.freeze(this);\n  }\n\n  isEmpty() {\n    return this.queue.length === 0;\n  }\n\n  addItem(priority, data, loaders) {\n    this.queue.push(new QueueItem(priority, data, loaders));\n  }\n\n  sort() {\n    this.queue.sort((a, b) => a.priority - b.priority);\n  }\n\n}\n\nclass QueueItem {\n  /**\n   * @param {number} priority\n   * @param {Object} data\n   */\n  constructor(priority, data = {}, load) {\n    this.priority = priority;\n    this.data = data;\n    this.load = load;\n    Object.freeze(this);\n  }\n\n}\n\nfunction merge(original, additional) {\n  Object.keys(additional).forEach(key => {\n    original[key] = additional[key];\n  });\n}\n\nfunction reduceArray(data, key) {\n  return data.reduce((accum, params) => {\n    accum[params.uuid] = params[key];\n    return accum;\n  }, {});\n} // WEBPACK FOOTER //\n// ./src/Q3/assets/asset-deserializer.js","map":{"version":3,"sources":["/Users/ghost/Documents/three/src/source/assets/asset-deserializer.js"],"names":["loadGeometry","loadTexture","isTextureInUse","enqueueTextures","loadLight","loadEnvLight","finalizeLight","enqueEnvironmentLight","loadMaterial","isMaterialInUse","loadObject","finalizeObject","bindSkeleton","RenderManager","enqueLivelabels","enqueAnimations","populateAnimationData","Layer","addAnimation","loaders","Object","freeze","texture","THREE","TextureLoader","HDRCube","HDRCubeTextureLoader","draco","DRACOLoader","GLTF","GLTFLoader","file","FileLoader","CAssetDeserializer","constructor","_loadGeometries","data","Promise","all","keys","map","key","uuid","_loadTextures","newTextures","promises","assets","textures","filter","materials","slides","_loadLights","browserCapabilities","light","_loadEnvLights","resolve","then","_loadMaterials","envMap","newMaterials","material","_loadObjects","geometries","visible","animation","objects","forEach","object","_addLights","lights","_bindSkeletons","_enqueAssets","queue","isAsset","queuePriority","highPriority","envlight","animations","livelabels","_loadQueue","background","mixer","editMode","scene","livelabelManager","highPriorityCallback","hasCalledPriority","sort","waitingForLast","loadNextItems","count","items","getItems","isEmpty","length","item","push","load","catch","reason","console","error","finally","log","importAsset","activeData","slide","layers","assetId","assetData","references","assetType","isObject","isReference","parent_world","window","Q3","gateNetwork","currentWorldUuid","assetQueue","AssetQueue","nextSlide","slideData","JSON","parse","stringify","splice","new2DAssets","layers2D","reduce","accum","undefined","list","update","assign","_geometries","reduceArray","merge","_textures","_lights","envLight","cubeMap","_materials","_objects","additionalData","labels","live","fire","_loadReferences","existingReferences","ref","reject","url","location","origin","COOBO","success","asset","liveLabels","assetTypeLib","assetTypeRef","isMaterial","refAsset","position","x","y","z","rotation","scale","setRequestHeader","curSlide","isEditMode","backgroundContainer","AssetLibrary","_envLight","result","shadowMap","needsUpdate","parentElement","style","backgroundColor","backgroundValue","allIsLoaded","camera","updateCamera","splash","removeProgress","setups","autoStart","remove","$","fadeIn","on","setBackground","backgroundType","backgroundOffsetX","backgroundOffsetY","backgroundScaleX","backgroundScaleY","AssetDeserializer","Queue","q","i","getItem","prev","curr","priority","shift","isHighPriority","addItem","QueueItem","a","b","original","additional","params"],"mappings":"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","sourcesContent":["//import THREE from \"three\";\nimport loadGeometry from './deserialize-geometry';\nimport loadTexture, { isTextureInUse, enqueueTextures } from './deserialize-texture';\nimport loadLight, { loadEnvLight, finalizeLight, enqueEnvironmentLight } from './asset-lights';\nimport loadMaterial, { isMaterialInUse } from './deserialize-material';\nimport loadObject, { finalizeObject, bindSkeleton } from './deserialize-object';\nimport { RenderManager } from '../rendering/render-manager';\nimport { enqueLivelabels } from './deserialize-livelabels';\nimport { enqueAnimations, populateAnimationData } from './deserialize-animations';\nimport Layer from '../layers/Layer';\nimport { addAnimation } from '../slides/animation/addAnimation';\n\nconst loaders = Object.freeze({\n\ttexture: new THREE.TextureLoader(),\n\tHDRCube: new THREE.HDRCubeTextureLoader(),\n\tdraco: new THREE.DRACOLoader(),\n\tGLTF: new THREE.GLTFLoader(),\n\tfile: new THREE.FileLoader()\n});\n\nclass CAssetDeserializer {\n\tconstructor() {}\n\n\t_loadGeometries({ data }) {\n\t\treturn Promise.all(Object.keys(data).map(key => loadGeometry({ uuid: key, data: data[key], loaders })));\n\t}\n\n\t_loadTextures({ data }) {\n\t\tconst newTextures = {};\n\t\tconst promises = Promise.all(\n\t\t\tObject.keys(data.assets.textures)\n\t\t\t\t.filter(key => isTextureInUse({ uuid: key, data }))\n\t\t\t\t.map(key => {\n\t\t\t\t\tnewTextures[key] = data.assets.textures[key];\n\n\t\t\t\t\treturn loadTexture({\n\t\t\t\t\t\tuuid: key,\n\t\t\t\t\t\tdata: data.assets.textures[key],\n\t\t\t\t\t\tmaterials: data.assets.materials,\n\t\t\t\t\t\tslides: data.slides\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t);\n\n\t\tdata.assets.textures = newTextures;\n\n\t\treturn promises;\n\t}\n\n\t_loadLights({ data, browserCapabilities }) {\n\t\t// const newLights = {};\n\n\t\treturn Promise.all(\n\t\t\tObject.keys(data).map(key => {\n\t\t\t\tconst light = loadLight({\n\t\t\t\t\tuuid: key,\n\t\t\t\t\tdata: data[key],\n\t\t\t\t\tbrowserCapabilities\n\t\t\t\t});\n\n\t\t\t\t// newLights[key] = data[key];\n\n\t\t\t\treturn light;\n\t\t\t})\n\t\t);\n\t}\n\n\t_loadEnvLights() {\n\t\treturn new Promise(resolve => {\n\t\t\tloadEnvLight().then(light => {\n\t\t\t\tresolve({ uuid: light.uuid, light });\n\t\t\t});\n\t\t});\n\t}\n\n\t_loadMaterials({ data, textures, envMap }) {\n\t\tconst newMaterials = {};\n\n\t\tconst promises = Promise.all(\n\t\t\tObject.keys(data.assets.materials)\n\t\t\t\t.filter(key => isMaterialInUse({ uuid: key, data }))\n\t\t\t\t.map(key => {\n\t\t\t\t\tconst material = loadMaterial({\n\t\t\t\t\t\tuuid: key,\n\t\t\t\t\t\tdata: data.assets.materials[key],\n\t\t\t\t\t\ttextures,\n\t\t\t\t\t\tenvMap\n\t\t\t\t\t});\n\n\t\t\t\t\tnewMaterials[key] = data.assets.materials[key];\n\n\t\t\t\t\treturn material;\n\t\t\t\t})\n\t\t);\n\n\t\tdata.assets.materials = newMaterials;\n\n\t\treturn promises;\n\t}\n\n\t_loadObjects({ data, geometries, materials, slides = [] }) {\n\t\treturn Promise.all(\n\t\t\tObject.keys(data).map(key =>\n\t\t\t\tloadObject({\n\t\t\t\t\tuuid: key,\n\t\t\t\t\tdata: data[key],\n\t\t\t\t\tgeometries,\n\t\t\t\t\tmaterials,\n\t\t\t\t\tvisible: slides[0]\n\t\t\t\t\t\t? slides[0].animation[key]\n\t\t\t\t\t\t\t? slides[0].animation[key].visible !== false\n\t\t\t\t\t\t\t: true\n\t\t\t\t\t\t: true\n\t\t\t\t})\n\t\t\t)\n\t\t).then(objects => {\n\t\t\tobjects.forEach(({ uuid, object }) =>\n\t\t\t\tfinalizeObject({\n\t\t\t\t\tobject,\n\t\t\t\t\tslides,\n\t\t\t\t\tobjects,\n\t\t\t\t\tuuid,\n\t\t\t\t\tdata,\n\t\t\t\t\tmaterials\n\t\t\t\t})\n\t\t\t);\n\n\t\t\treturn objects;\n\t\t});\n\t}\n\n\t_addLights({ lights, objects, data, slides }) {\n\t\tObject.keys(lights).forEach(uuid => {\n\t\t\tfinalizeLight({ uuid, light: lights[uuid], objects, data, slides });\n\t\t});\n\t}\n\n\t_bindSkeletons({ data, objects }) {\n\t\tObject.keys(objects).forEach(uuid => {\n\t\t\tbindSkeleton({ uuid, data, object: objects[uuid], objects });\n\t\t});\n\t}\n\n\t_enqueAssets({ data, queue, isAsset }) {\n\t\tenqueueTextures({ data: data.assets, queue: queue.textures, queuePriority: queue.highPriority, isAsset });\n\t\tenqueEnvironmentLight({ data, queue: queue.envlight, isAsset });\n\t\tenqueAnimations({ data: data.assets, queue: queue.animations });\n\t\tenqueLivelabels({ data, queue: queue.livelabels });\n\t}\n\n\t_loadQueue({ queue, assets, data, background, mixer, editMode, scene, livelabelManager, highPriorityCallback }) {\n\t\tlet hasCalledPriority = false;\n\n\t\treturn new Promise(resolve => {\n\t\t\tqueue.sort();\n\n\t\t\tconst all = [];\n\t\t\tlet waitingForLast = false;\n\t\t\t(function loadNextItems(count) {\n\t\t\t\tconst items = queue.getItems(count);\n\n\t\t\t\tif (!hasCalledPriority && queue.highPriority.isEmpty()) {\n\t\t\t\t\tif (highPriorityCallback) highPriorityCallback();\n\t\t\t\t\thasCalledPriority = false;\n\t\t\t\t}\n\n\t\t\t\tif (items.length > 0) {\n\t\t\t\t\tfor (const item of items) {\n\t\t\t\t\t\tall.push(\n\t\t\t\t\t\t\titem\n\t\t\t\t\t\t\t\t.load({\n\t\t\t\t\t\t\t\t\tloaders,\n\t\t\t\t\t\t\t\t\tassets,\n\t\t\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t\t\t\titem: item.data,\n\t\t\t\t\t\t\t\t\tbackground,\n\t\t\t\t\t\t\t\t\tmixer,\n\t\t\t\t\t\t\t\t\teditMode,\n\t\t\t\t\t\t\t\t\tscene,\n\t\t\t\t\t\t\t\t\tlivelabelManager\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t// .then(data => console.log(\"replace i guess\"))\n\t\t\t\t\t\t\t\t.catch(reason => console.error(reason))\n\t\t\t\t\t\t\t\t.finally(() => {\n\t\t\t\t\t\t\t\t\tif (!waitingForLast) loadNextItems(1);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (!waitingForLast) {\n\t\t\t\t\twaitingForLast = true;\n\t\t\t\t\tconsole.log('No more items');\n\t\t\t\t\tPromise.all(all).then(() => {\n\t\t\t\t\t\tconsole.log('all is loaded');\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})(5);\n\t\t});\n\t}\n\n\timportAsset({ data, assets, browserCapabilities, activeData, slide, layers }) {\n\t\tconst { assetId, assetData } = data;\n\n\t\tactiveData.assets.references.push(assetId);\n\n\t\tObject.keys(assetData.assets).forEach(key => {\n\t\t\tconst assetType = assetData.assets[key];\n\t\t\tconst isObject = key === 'objects';\n\n\t\t\tObject.keys(assetType).forEach(key => {\n\t\t\t\tassetType[key].isReference = true;\n\n\t\t\t\tif (isObject) assetType[key].parent_world = window.Q3.gateNetwork.currentWorldUuid;\n\t\t\t});\n\t\t});\n\n\t\tconst assetQueue = new AssetQueue();\n\t\tconst nextSlide = slide + 1;\n\t\tconst slideData = JSON.parse(JSON.stringify(activeData.slides[slide]));\n\n\t\tactiveData.slides.splice(nextSlide, 0, slideData);\n\n\t\taddAnimation();\n\n\t\tconst new2DAssets = Object.keys(window.Q3.data.layers.layers2D).reduce((accum, uuid) => {\n\t\t\tif (uuid !== undefined) {\n\t\t\t\taccum[uuid] = true;\n\t\t\t\tlayers.list[uuid] = new Layer(activeData.layers.layers2D[uuid]);\n\t\t\t\tlayers.list[uuid].uuid = uuid;\n\t\t\t}\n\n\t\t\treturn accum;\n\t\t}, {});\n\n\t\tlayers.update();\n\t\tactiveData.slides[slide].layers = Object.assign({}, activeData.slides[slide].layers, new2DAssets);\n\n\t\treturn new Promise(resolve => {\n\t\t\tthis._loadGeometries({ data: assetData.assets.geometries }).then(_geometries => {\n\t\t\t\tconst geometries = reduceArray(_geometries, 'geometry');\n\n\t\t\t\tmerge(assets.geometries, geometries);\n\t\t\t\tmerge(activeData.assets.geometries, assetData.assets.geometries);\n\n\t\t\t\tconsole.log('Geometry ready.');\n\n\t\t\t\tthis._loadTextures({ data: assetData }).then(_textures => {\n\t\t\t\t\tconst textures = reduceArray(_textures, 'texture');\n\n\t\t\t\t\tmerge(assets.textures, textures);\n\t\t\t\t\tmerge(activeData.assets.textures, assetData.assets.textures);\n\n\t\t\t\t\tconsole.log('Textures ready.');\n\n\t\t\t\t\tthis._loadLights({ data: assetData.assets.lights, browserCapabilities }).then(_lights => {\n\t\t\t\t\t\tconst lights = reduceArray(_lights, 'light');\n\n\t\t\t\t\t\tmerge(assets.lights, lights);\n\t\t\t\t\t\tmerge(activeData.assets.lights, assetData.assets.lights);\n\n\t\t\t\t\t\tconsole.log('Lights ready.');\n\n\t\t\t\t\t\tconst envMap = assets.envLight;\n\n\t\t\t\t\t\tthis._loadMaterials({ data: assetData, textures, envMap: envMap.cubeMap }).then(_materials => {\n\t\t\t\t\t\t\tconst materials = reduceArray(_materials, 'material');\n\n\t\t\t\t\t\t\tmerge(assets.materials, materials);\n\t\t\t\t\t\t\tmerge(activeData.assets.materials, assetData.assets.materials);\n\n\t\t\t\t\t\t\tconsole.log('Materials ready.');\n\n\t\t\t\t\t\t\tthis._loadObjects({\n\t\t\t\t\t\t\t\tdata: assetData.assets.objects,\n\t\t\t\t\t\t\t\tgeometries,\n\t\t\t\t\t\t\t\tmaterials,\n\t\t\t\t\t\t\t\tslides: assetData.slides\n\t\t\t\t\t\t\t}).then(_objects => {\n\t\t\t\t\t\t\t\tconst objects = reduceArray(_objects, 'object');\n\n\t\t\t\t\t\t\t\tmerge(assets.objects, objects);\n\t\t\t\t\t\t\t\tmerge(activeData.assets.objects, assetData.assets.objects);\n\n\t\t\t\t\t\t\t\tpopulateAnimationData({ data: activeData, additionalData: assetData });\n\n\t\t\t\t\t\t\t\tObject.keys(assetData.assets.objects).forEach(key => {\n\t\t\t\t\t\t\t\t\tactiveData.slides[slide].animation[key].visible = true;\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tconsole.log('Objects ready.');\n\n\t\t\t\t\t\t\t\tthis._addLights({ lights, objects, data: assetData, slides: activeData.slides });\n\n\t\t\t\t\t\t\t\tthis._bindSkeletons({ data: assetData, objects });\n\n\t\t\t\t\t\t\t\tthis._enqueAssets({ data: assetData, queue: assetQueue, isAsset: true });\n\n\t\t\t\t\t\t\t\tthis._loadQueue({\n\t\t\t\t\t\t\t\t\tqueue: assetQueue,\n\t\t\t\t\t\t\t\t\tassets,\n\t\t\t\t\t\t\t\t\tdata: assetData,\n\t\t\t\t\t\t\t\t\tbackground: window.Q3.background,\n\t\t\t\t\t\t\t\t\tmixer: window.Q3.mixer,\n\t\t\t\t\t\t\t\t\tscene: window.Q3.scene,\n\t\t\t\t\t\t\t\t\teditMode: window.Q3.editMode,\n\t\t\t\t\t\t\t\t\tlivelabelManager: window.Q3.labels.live\n\t\t\t\t\t\t\t\t}).then(() => {\n\t\t\t\t\t\t\t\t\tresolve(1);\n\t\t\t\t\t\t\t\t\twindow.Q3.fire('assetsLoaded');\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\t_loadReferences({ data }) {\n\t\t// loaders.file.setRequestHeader({\n\t\t//     Authorization: `Bearer ${localStorage.getItem(\"jwt\")}`\n\t\t// });\n\n\t\tconst existingReferences = Object.keys(data.assets).reduce((accum, key) => {\n\t\t\tconst assetType = data.assets[key];\n\n\t\t\tif (key === 'references') return accum;\n\n\t\t\taccum[key] = Object.keys(assetType).reduce((accum, key) => {\n\t\t\t\tif (assetType[key].isReference) {\n\t\t\t\t\taccum[key] = assetType[key];\n\t\t\t\t\tdelete assetType[key];\n\t\t\t\t}\n\n\t\t\t\treturn accum;\n\t\t\t}, {});\n\n\t\t\treturn accum;\n\t\t}, {});\n\n\t\t// console.log(existingReferences);\n\n\t\treturn Promise.all(\n\t\t\tdata.assets.references.map(ref => {\n\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\tconst url = `${window.location.origin}${window.COOBO ? '/api' : ''}/assetlib/${ref}`;\n\n\t\t\t\t\tfunction success(asset) {\n\t\t\t\t\t\tasset = JSON.parse(asset);\n\n\t\t\t\t\t\tObject.keys(asset.data.assets).forEach(key => {\n\t\t\t\t\t\t\tconst assetType = asset.data.assets[key];\n\t\t\t\t\t\t\tObject.keys(assetType).forEach(key => {\n\t\t\t\t\t\t\t\tassetType[key].isReference = true;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tdata.liveLabels = Object.assign({}, asset.data.liveLabels, data.liveLabels);\n\n\t\t\t\t\t\tObject.keys(asset.data.assets).forEach(key => {\n\t\t\t\t\t\t\tconst assetTypeLib = asset.data.assets[key];\n\t\t\t\t\t\t\tconst assetTypeRef = existingReferences[key] || {};\n\t\t\t\t\t\t\tconst assetType = (data.assets[key] = data.assets[key] || {});\n\t\t\t\t\t\t\tconst isObject = key === 'objects';\n\t\t\t\t\t\t\tconst isMaterial = key === 'materials';\n\n\t\t\t\t\t\t\tObject.keys(assetTypeLib).forEach(key => {\n\t\t\t\t\t\t\t\tif (isMaterial)\n\t\t\t\t\t\t\t\t\tassetType[key] = Object.assign({}, assetTypeLib[key], assetTypeRef[key]);\n\t\t\t\t\t\t\t\telse assetType[key] = assetTypeLib[key];\n\n\t\t\t\t\t\t\t\tif (assetTypeRef[key]) {\n\t\t\t\t\t\t\t\t\tconst refAsset = assetTypeRef[key];\n\t\t\t\t\t\t\t\t\tconst ref = assetType[key];\n\t\t\t\t\t\t\t\t\tObject.keys(refAsset).forEach(key => {\n\t\t\t\t\t\t\t\t\t\tif (isObject && key === 'parent_world') {\n\t\t\t\t\t\t\t\t\t\t\tref[key] = refAsset[key];\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// if (key === \"position\") {\n\t\t\t\t\t\t\t\t\t\t//     console.log(\"update position\")\n\t\t\t\t\t\t\t\t\t\t// } else if (key === \"rotation\") {\n\t\t\t\t\t\t\t\t\t\t//     console.log(\"update rotation\");\n\t\t\t\t\t\t\t\t\t\t// } else if (key === \"scale\") {\n\t\t\t\t\t\t\t\t\t\t//     console.log(\"update scale\");\n\t\t\t\t\t\t\t\t\t\t// } else if (key === \"quaternion\") {\n\t\t\t\t\t\t\t\t\t\t//     console.log(\"update quaternion\");\n\t\t\t\t\t\t\t\t\t\t// } else {\n\t\t\t\t\t\t\t\t\t\t//     ref[key] = refAsset[key];\n\t\t\t\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (isObject) {\n\t\t\t\t\t\t\t\t\tconst object = assetTypeLib[key];\n\t\t\t\t\t\t\t\t\tdata.slides.forEach(slide => {\n\t\t\t\t\t\t\t\t\t\tif (!slide.animation[key]) {\n\t\t\t\t\t\t\t\t\t\t\tslide.animation[key] = {\n\t\t\t\t\t\t\t\t\t\t\t\tposition: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tx: object.position.x,\n\t\t\t\t\t\t\t\t\t\t\t\t\ty: object.position.y,\n\t\t\t\t\t\t\t\t\t\t\t\t\tz: object.position.z\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\trotation: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tx: object.rotation.x,\n\t\t\t\t\t\t\t\t\t\t\t\t\ty: object.rotation.y,\n\t\t\t\t\t\t\t\t\t\t\t\t\tz: object.rotation.z\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\tscale: { x: object.scale.x, y: object.scale.y, z: object.scale.z }\n\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// data.assets = Object.keys(data.assets).map(key => {\n\t\t\t\t\t\t//     const sourceAssetType = data.assets[assetType];\n\t\t\t\t\t\t//     const referenceAssetType = asset.data.assets[assetType];\n\t\t\t\t\t\t// });\n\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t}\n\n\t\t\t\t\tloaders.file.load(url, success, undefined, reject);\n\t\t\t\t});\n\t\t\t})\n\t\t).then(loaders.file.setRequestHeader(undefined));\n\t}\n\n\tload({ data, browserCapabilities, curSlide, isEditMode, backgroundContainer }) {\n\t\tconsole.log(data);\n\n\t\tconst assets = new AssetLibrary();\n\t\tconst assetQueue = new AssetQueue();\n\n\t\twindow.Q3.assets = assets;\n\n\t\tdata.assets.references = data.assets.references || [];\n\n\t\treturn new Promise(resolve => {\n\t\t\tthis._loadReferences({ data }).then(() => {\n\t\t\t\tthis._loadGeometries({ data: data.assets.geometries }).then(_geometries => {\n\t\t\t\t\tconst geometries = reduceArray(_geometries, 'geometry');\n\n\t\t\t\t\tassets.geometries = geometries;\n\n\t\t\t\t\tconsole.log('Geometry ready.');\n\n\t\t\t\t\tthis._loadTextures({ data }).then(_textures => {\n\t\t\t\t\t\tconst textures = reduceArray(_textures, 'texture');\n\n\t\t\t\t\t\tassets.textures = textures;\n\n\t\t\t\t\t\tconsole.log('Textures ready.');\n\n\t\t\t\t\t\tthis._loadLights({ data: data.assets.lights, browserCapabilities }).then(_lights => {\n\t\t\t\t\t\t\tconst lights = reduceArray(_lights, 'light');\n\n\t\t\t\t\t\t\tassets.lights = lights;\n\n\t\t\t\t\t\t\tconsole.log('Lights ready.');\n\n\t\t\t\t\t\t\tthis._loadEnvLights().then(_envLight => {\n\t\t\t\t\t\t\t\tconst envMap = { cubeMap: _envLight.light };\n\n\t\t\t\t\t\t\t\tassets.envLight = envMap;\n\n\t\t\t\t\t\t\t\tconsole.log('Environment light ready.');\n\n\t\t\t\t\t\t\t\tthis._loadMaterials({ data, textures, envMap: envMap.cubeMap }).then(_materials => {\n\t\t\t\t\t\t\t\t\tconst materials = reduceArray(_materials, 'material');\n\n\t\t\t\t\t\t\t\t\tassets.materials = materials;\n\n\t\t\t\t\t\t\t\t\tconsole.log('Materials ready.');\n\n\t\t\t\t\t\t\t\t\tthis._loadObjects({\n\t\t\t\t\t\t\t\t\t\tdata: data.assets.objects,\n\t\t\t\t\t\t\t\t\t\tgeometries,\n\t\t\t\t\t\t\t\t\t\tmaterials,\n\t\t\t\t\t\t\t\t\t\tslides: data.slides\n\t\t\t\t\t\t\t\t\t}).then(_objects => {\n\t\t\t\t\t\t\t\t\t\tconst objects = reduceArray(_objects, 'object');\n\n\t\t\t\t\t\t\t\t\t\tassets.objects = objects;\n\n\t\t\t\t\t\t\t\t\t\tconsole.log('Objects ready.');\n\n\t\t\t\t\t\t\t\t\t\tthis._addLights({ lights, objects, data, slides: data.slides });\n\n\t\t\t\t\t\t\t\t\t\tthis._bindSkeletons({ data, objects });\n\n\t\t\t\t\t\t\t\t\t\tresolve(1);\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}).then(result => {\n\t\t\tRenderManager.shadowMap.needsUpdate = true;\n\t\t\tconst slide = data.slides[curSlide];\n\n\t\t\tif (!isEditMode) {\n\t\t\t\tbackgroundContainer.parentElement.style.backgroundColor = slide.backgroundValue;\n\t\t\t}\n\n\t\t\twindow.Q3.fire('assetsLoaded');\n\t\t\twindow.Q3.fire('labelsLoaded');\n\t\t\twindow.Q3.allIsLoaded = true;\n\t\t\twindow.Q3.camera.updateCamera();\n\t\t\tif (!window.Q3.editMode) {\n\t\t\t\twindow.Q3.splash.removeProgress();\n\t\t\t}\n\t\t\tif (window.Q3.data.setups.autoStart !== false || window.Q3.editMode) {\n\t\t\t\twindow.Q3.splash.remove();\n\t\t\t\twindow.Q3.fire('splashremoved');\n\t\t\t} else {\n\t\t\t\t$('#start-tour-btn')\n\t\t\t\t\t.fadeIn()\n\t\t\t\t\t.on('click', () => {\n\t\t\t\t\t\twindow.Q3.splash.remove();\n\t\t\t\t\t\twindow.Q3.fire('splashremoved');\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\tconsole.log('Everything is ready.');\n\n\t\t\tthis._enqueAssets({ data, queue: assetQueue });\n\n\t\t\tconst highPriorityCallback = () => {\n\t\t\t\twindow.Q3.background.setBackground(\n\t\t\t\t\tslide.backgroundType,\n\t\t\t\t\tslide.backgroundValue,\n\t\t\t\t\tslide.backgroundOffsetX,\n\t\t\t\t\tslide.backgroundOffsetY,\n\t\t\t\t\tslide.backgroundScaleX,\n\t\t\t\t\tslide.backgroundScaleY,\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t};\n\n\t\t\tthis._loadQueue({\n\t\t\t\tqueue: assetQueue,\n\t\t\t\tassets,\n\t\t\t\tdata,\n\t\t\t\tbackground: window.Q3.background,\n\t\t\t\tmixer: window.Q3.mixer,\n\t\t\t\tscene: window.Q3.scene,\n\t\t\t\teditMode: window.Q3.editMode,\n\t\t\t\tlivelabelManager: window.Q3.labels.live,\n\t\t\t\thighPriorityCallback\n\t\t\t}).then(() => {\n\t\t\t\twindow.Q3.fire('assetsLoaded');\n\t\t\t});\n\n\t\t\t// console.log(assetQueue);\n\n\t\t\treturn result;\n\t\t});\n\t}\n}\n\nconst AssetDeserializer = new CAssetDeserializer();\n\nexport default AssetDeserializer;\nexport { AssetDeserializer };\n\nclass AssetLibrary {\n\tconstructor() {\n\t\tthis.textures = {};\n\t\tthis.geometries = {};\n\t\tthis.lights = {};\n\t\tthis.materials = {};\n\t\tthis.objects = {};\n\t\tthis.animations = {};\n\t\tthis.envLight = { cubeMap: null };\n\t\tthis.references = [];\n\t}\n}\n\nclass AssetQueue {\n\tconstructor() {\n\t\tthis.textures = new Queue();\n\t\tthis.highPriority = new Queue(true);\n\t\tthis.livelabels = new Queue();\n\t\tthis.envlight = new Queue();\n\t\tthis.animations = new Queue();\n\n\t\tObject.freeze(this);\n\t}\n\n\tsort() {\n\t\tObject.keys(this).forEach(q => {\n\t\t\tif (this[q] instanceof Queue) this[q].sort();\n\t\t});\n\t}\n\n\tgetItems(count) {\n\t\tconst result = [];\n\t\tfor (let i = 0; i < count; i++) {\n\t\t\tlet item = this.getItem();\n\t\t\tif (!!item) {\n\t\t\t\tresult.push(item);\n\t\t\t} else {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tgetItem() {\n\t\tconst queue = Object.keys(this)\n\t\t\t.map(key => this[key])\n\t\t\t.reduce(\n\t\t\t\t(prev, curr) => {\n\t\t\t\t\tif (!(curr instanceof Queue) || curr.queue.length === 0) {\n\t\t\t\t\t\treturn prev;\n\t\t\t\t\t}\n\t\t\t\t\tif (!prev.queue || prev.queue.length === 0) {\n\t\t\t\t\t\treturn curr;\n\t\t\t\t\t}\n\t\t\t\t\treturn prev.queue[0].priority < curr.queue[0].priority ? prev : curr;\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tqueue: []\n\t\t\t\t\t//priority: Infinity\n\t\t\t\t}\n\t\t\t);\n\n\t\treturn (queue && queue.queue.shift()) || null;\n\t}\n}\n\nclass Queue {\n\tconstructor(isHighPriority = false) {\n\t\t/**\n\t\t * @type {QueueItem[]}\n\t\t */\n\t\tthis.queue = [];\n\n\t\tthis.isHighPriority = isHighPriority;\n\n\t\tObject.freeze(this);\n\t}\n\n\tisEmpty() {\n\t\treturn this.queue.length === 0;\n\t}\n\n\taddItem(priority, data, loaders) {\n\t\tthis.queue.push(new QueueItem(priority, data, loaders));\n\t}\n\n\tsort() {\n\t\tthis.queue.sort((a, b) => a.priority - b.priority);\n\t}\n}\n\nclass QueueItem {\n\t/**\n\t * @param {number} priority\n\t * @param {Object} data\n\t */\n\tconstructor(priority, data = {}, load) {\n\t\tthis.priority = priority;\n\t\tthis.data = data;\n\t\tthis.load = load;\n\n\t\tObject.freeze(this);\n\t}\n}\n\nfunction merge(original, additional) {\n\tObject.keys(additional).forEach(key => {\n\t\toriginal[key] = additional[key];\n\t});\n}\n\nfunction reduceArray(data, key) {\n\treturn data.reduce((accum, params) => {\n\t\taccum[params.uuid] = params[key];\n\n\t\treturn accum;\n\t}, {});\n}\n\n// WEBPACK FOOTER //\n// ./src/Q3/assets/asset-deserializer.js\n"]},"metadata":{},"sourceType":"module"}